<?xml version="1.0"?>
<robot name="deepdrive_deepdrive"
  xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:arg name="sim_mode" default="false" />
  <xacro:arg name="use_ros2_control" default="true" />

  <xacro:property name="wheel_base" value="0.328" />
  <xacro:property name="wheel_radius" value="0.08" />
  <xacro:property name="use_mock_hardware" value="false" />

  <xacro:include filename="$(find deepdrive_description)/urdf/common_properties.xacro" />
  <xacro:include filename="$(find deepdrive_description)/urdf/wheels.xacro" />
  <xacro:include filename="$(find deepdrive_description)/urdf/sonar.xacro" />
  <xacro:include filename="$(find deepdrive_description)/urdf/optical_flow.xacro" />
  <!-- TODO: Use flag to determine whether to use deepdrive_control -->
  <xacro:include filename="$(find deepdrive_control)/urdf/ros2_control.xacro" />


  <link name="base_footprint" />

  <joint name="base_joint" type="fixed">
    <parent link="base_footprint" />
    <child link="base_link" />
    <origin xyz="0 0 0.010" rpy="0 0 0" />
  </joint>

  <!-- Frame/Chassis -->
  <link name="base_link">
    <visual>
      <origin xyz="-0.064 0 0.0" rpy="0 0 ${3*pi/2}" />
      <geometry>
        <mesh filename="package://deepdrive_description/meshes/bases/chassis.stl" scale=".001 .001 .001" />
      </geometry>
      <material name="black" />
    </visual>

    <collision>
      <origin xyz="-0.064 0 0.047" rpy="0 0 0" />
      <geometry>
        <box size="0.310 0.140 0.120" />
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <mass value="2.3729096e+00" />
      <inertia ixx="8.7002718e-03" ixy="-4.7576583e-05" ixz="1.1160499e-04" iyy="8.6195418e-03" iyz="-3.5422299e-06" izz="1.4612727e-02" />
    </inertial>
  </link>

  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>


  <!-- Body-->
  <joint name="body_joint" type="fixed">
    <parent link="base_link" />
    <child link="body_link" />
    <origin xyz="0 0 0.0" rpy="0 0 0" />
  </joint>

  <link name="body_link">
    <visual>
      <origin xyz="-0.064 0 0.001" rpy="0 0 ${3*pi/2}" />
      <geometry>
        <mesh filename="package://deepdrive_description/meshes/bases/body.stl" scale=".001 .001 .001" />
      </geometry>
      <material name="red" />
    </visual>
  </link>

  <gazebo reference="body_link">
    <material>Gazebo/Red</material>
  </gazebo>

  <!-- Wheels -->
  <xacro:wheel name="front_right" lr="1" fb="1" wheel_base="${wheel_base}" wheel_radius="${wheel_radius}" />
  <xacro:wheel name="back_right" lr="1" fb="-1" wheel_base="${wheel_base}" wheel_radius="${wheel_radius}" />
  <xacro:wheel name="front_left" lr="-1" fb="1" wheel_base="${wheel_base}" wheel_radius="${wheel_radius}" />
  <xacro:wheel name="back_left" lr="-1" fb="-1" wheel_base="${wheel_base}" wheel_radius="${wheel_radius}" />


  <!-- IMU -->
  <joint name="imu_base_joint" type="fixed">
    <parent link="base_link" />
    <child link="imu_base_link" />
    <origin xyz="0.12 0 0.111" rpy="0 0 0" />
  </joint>

  <link name="imu_base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 -${pi/2}" />
      <!-- <origin xyz=".325 0 -.07" rpy="0 0 0" /> -->
      <geometry>
        <mesh filename="package://deepdrive_description/meshes/sensors/imu.stl" scale=".001 .001 .001" />
      </geometry>
      <material name="white" />
    </visual>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="imu_base_link" />
    <child link="imu_link" />
    <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi}" />
  </joint>

  <link name="imu_link"></link>


  <!-- LIDAR -->
  <joint name="ldlidar_joint" type="fixed">
    <parent link="base_link" />
    <child link="ldlidar_base" />
    <origin xyz="-0.119 0.0009 0.118" rpy="0 0 0" />
  </joint>

  <xacro:include filename="$(find deepdrive_description)/urdf/lidar.xacro" />


  <!-- Oak-d-lite Camera -->
  <xacro:include filename="$(find deepdrive_description)/urdf/oakdlite.xacro" />
  <joint name="base_camera_depth_joint" type="fixed">
    <parent link="base_link" />
    <child link="camera_depth" />
    <origin xyz="0.295 0 0.08" rpy="0 0 0" />
  </joint>
  <link name="camera_depth" />
  <xacro:camera_depth mount_point="camera_depth" />


  <!-- Ultrasonic Sonar -->
  <xacro:sonar name="front_right" xyz=".296 .064 .035" rpy="0 0 ${5*pi/180}" />
  <xacro:sonar name="front_left" xyz=".296 -.064 .035" rpy="0 0 -${5*pi/180}" />

  <!-- Optical Flow -->
  <!-- <xacro:optical_flow name="front" xyz=".296 -.064 .035" rpy="0 0 -${5*pi/180}" /> -->
  <xacro:optical_flow name="front" xyz=".296 0 .005" rpy="0 ${pi/2} 0" />

  <!-- Speaker -->
  <joint name="speaker_joint" type="fixed">
    <parent link="base_link" />
    <child link="speaker_link" />
    <origin xyz="-.03 0 0.1" rpy="0 0 0" />
  </joint>

  <link name="speaker_link">
    <visual>
      <origin xyz="0 -0.41 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://deepdrive_description/meshes/sensors/speaker.stl" scale=".001 .001 .001" />
      </geometry>
      <material name="black" />
    </visual>
  </link>

  <gazebo reference="speaker_link">
    <material>Gazebo/Black</material>
  </gazebo>


  <!-- ros2_control-->
  <xacro:if value="$(arg use_ros2_control)">
    <xacro:deepdrive_ros2_control name="diff_drive_controller" sim_mode="$(arg sim_mode)" use_mock_hardware="${use_mock_hardware}" />
  </xacro:if>


  <xacro:unless value="$(arg use_ros2_control)">
    <!-- <xacro:if value="$(arg sim_mode)"> -->


    <!-- This one works in gazebo without ros2_control -->
    <gazebo>
      <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
        <update_rate>50</update_rate>
        <num_wheel_pairs>2</num_wheel_pairs>
        <left_joint>wheel_front_left_joint</left_joint>
        <right_joint>wheel_front_right_joint</right_joint>
        <left_joint>wheel_back_left_joint</left_joint>
        <right_joint>wheel_back_right_joint</right_joint>

        <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
        <wheel_separation>${wheel_base}</wheel_separation>

        <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
        <wheel_diameter>${wheel_radius*2}</wheel_diameter>

        <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
        <max_wheel_torque>5</max_wheel_torque>

        <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
        <max_wheel_acceleration>10.0</max_wheel_acceleration>

        <command_topic>cmd_vel</command_topic>
        <odometry_topic>odom</odometry_topic>

        <odometry_frame>odom</odometry_frame>
        <robot_base_frame>base_footprint</robot_base_frame>

        <publish_odom>true</publish_odom>
        <publish_odom_tf>true</publish_odom_tf>
        <publish_wheel_tf>true</publish_wheel_tf>
      </plugin>
    </gazebo>
  </xacro:unless>


  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>50</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

<!-- </xacro:if> -->


</robot>