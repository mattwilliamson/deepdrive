<?xml version="1.0" ?>
<robot name="deepdrive_deepdrive"
  xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:property name="wheel_base" value="0.175" />
  <xacro:property name="wheel_radius" value="0.035" />

  <xacro:include filename="$(find deepdrive_description)/urdf/common_properties.xacro"/>
  <xacro:include filename="$(find deepdrive_description)/urdf/wheels.xacro"/>


  <link name="base_footprint"/>

  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link" />
    <origin xyz="0 0 0.010" rpy="0 0 0"/>
  </joint>

  <link name="base_link">
    <visual>
      <origin xyz="-0.064 0 0.0" rpy="0 0 1.57"/>
      <geometry>
        <mesh filename="package://deepdrive_description/meshes/bases/deepdrive_chassis.stl" scale="1 1 1"/>
      </geometry>
      <material name="grey"/>
    </visual>

    <collision>
      <origin xyz="-0.064 0 0.047" rpy="0 0 0"/>
      <geometry>
        <box size="0.310 0.140 0.120"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="2.3729096e+00"/>
      <inertia ixx="8.7002718e-03" ixy="-4.7576583e-05" ixz="1.1160499e-04" iyy="8.6195418e-03" iyz="-3.5422299e-06" izz="1.4612727e-02" />
    </inertial>
  </link>

  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>


  <xacro:wheel name="front_right" lr="1" fb="1" wheel_base="${wheel_base}" wheel_radius="${wheel_radius}" />
  <xacro:wheel name="back_right" lr="1" fb="-1" wheel_base="${wheel_base}" wheel_radius="${wheel_radius}" />
  <xacro:wheel name="front_left" lr="-1" fb="1" wheel_base="${wheel_base}" wheel_radius="${wheel_radius}" />
  <xacro:wheel name="back_left" lr="-1" fb="-1" wheel_base="${wheel_base}" wheel_radius="${wheel_radius}" />



  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0.0 0 0.068" rpy="0 0 0"/>
  </joint>

  <link name="imu_link"/>

  <!--
   <joint name="oak_joint" type="fixed">
    <parent link="base_link"/>
    <child link="oak"/>
    <origin xyz="0.0 0 0.068" rpy="0 0 1.57"/>
  </joint>

  <link name="oak"/> -->


  <!-- LIDAR -->
  <xacro:include filename="$(find deepdrive_description)/urdf/lidar.xacro" />

  <xacro:include filename="$(find deepdrive_description)/urdf/camera.xacro" />

  <ros2_control name="GazeboSystem" type="system">
    <hardware>
      <plugin>gazebo_ros2_control/GazeboSystem</plugin>
    </hardware> 
  <!-- <hardware>
      <plugin>mock_components/GenericSystem</plugin>
      <param name="calculate_dynamics">true</param>
    </hardware> -->
  <joint name="wheel_front_left_joint">
      <command_interface name="velocity">
        <param name="min">-10</param>
        <param name="max">10</param>
      </command_interface>
      <state_interface name="position" />
      <state_interface name="velocity" />
    </joint>
    <joint name="wheel_front_right_joint">
      <command_interface name="velocity">
        <param name="min">-10</param>
        <param name="max">10</param>
      </command_interface>
      <state_interface name="velocity" />
      <state_interface name="position" />
    </joint>
    <joint name="wheel_back_left_joint">
      <command_interface name="velocity">
        <param name="min">-10</param>
        <param name="max">10</param>
      </command_interface>
      <state_interface name="position" />
      <state_interface name="velocity" />
    </joint>
    <joint name="wheel_back_right_joint">
      <command_interface name="velocity">
        <param name="min">-10</param>
        <param name="max">10</param>
      </command_interface>
      <state_interface name="velocity" />
      <state_interface name="position" />
    </joint>
  </ros2_control>

  <!-- <ros2_control name="${name}" type="system">
    <xacro:unless value="${use_mock_hardware}">
      <hardware>
        <plugin>ros2_control_demo_example_2/DiffBotSystemHardware</plugin>
        <param name="example_param_hw_start_duration_sec">0</param>
        <param name="example_param_hw_stop_duration_sec">3.0</param>
      </hardware>
    </xacro:unless>
    <xacro:if value="${use_mock_hardware}">
      <hardware>
        <plugin>mock_components/GenericSystem</plugin>
        <param name="calculate_dynamics">true</param>
      </hardware>
    </xacro:if>
    <joint name="${prefix}left_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
    <joint name="${prefix}right_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
  </ros2_control> -->


  <gazebo>
    <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
      <parameters>$(find deepdrive_description)/config/controllers.yaml</parameters>
    </plugin>
  </gazebo>


<!-- This one works in gazebo -->
  <!-- <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <num_wheel_pairs>2</num_wheel_pairs>
      <left_joint>wheel_front_left_joint</left_joint>
      <right_joint>wheel_front_right_joint</right_joint>
      <left_joint>wheel_back_left_joint</left_joint>
      <right_joint>wheel_back_right_joint</right_joint>
      <wheel_separation>${wheel_base}</wheel_separation>
      <wheel_diameter>${wheel_radius*2}</wheel_diameter>

      <max_wheel_torque>200</max_wheel_torque>
      <max_wheel_acceleration>10.0</max_wheel_acceleration>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>

      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
    </plugin>
  </gazebo> -->


  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>




</robot>
